top_five_genres
top_five_genres %>%
# plotting x as genres and y as number
ggplot(mapping = aes(x = Genre, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Genre (top 5)", x = "Genre",
y = "Number of anime")
# plotting x axis episode and y axis rating
data %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# splitting it into 5 episode range
data$episodeRange <- data$episodes %>%
cut(breaks = 5)
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodeRange, y = rating)) +
geom_boxplot() + # boxplot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis members.
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = members)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Number of Members", title = "Plot of Episodes vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_point() + # scatter plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_smooth() + # fitting a smooth line plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# let us fit a linear model. members as a function of rating.
fittedLine <- lm(members ~ rating + I(rating^2), data)
tidy(fittedLine)
data <- augment(fittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
knitr::opts_chunk$set(echo = TRUE)
# inlcuding dependancies
library(tidyverse)
library(rvest)
library(stringr)
library(broom)
data <- read.csv("anime.csv") # reads the data from anime.csv file
head(data) # shows basic info about the data.
url <- "https://myanimelist.net/anime.php"
# Let us first get the data from the wesite using rvest functions.
info <- url %>%
read_html() %>%
html_nodes(".genre-list.al") %>%
html_text() %>%
as_data_frame()
head(info) # lets look at the data we collected.
# splitting the data into two columns for the second data set
genre <- info %>%
slice(1:43) %>%
separate(value, c("Genre", "Number"), sep = " \\(")
# splitting the data into two columns for the third data set
studio <- info %>%
slice(44:92) %>%
separate(value, c("Studio", "Number"), sep = " \\(")
# function to remove , and ) characters and return the modified string
remove_junk <- function(str) {
res <- "" # creating a new string
for (char in strsplit(str, "")[[1]]) { # iterating through the input string
if (char != "," && char != ")") {
res = paste(res, char, sep = "") # adding the char to res if it is not , and )
}
}
res
}
# calling the function remove junk to make the string look proper
genre$Number <- sapply(genre$Number, remove_junk)
studio$Number <- sapply(studio$Number, remove_junk)
# converting number to an integer.
genre <- genre %>%
mutate(Number = as.integer(Number))
studio <- studio %>%
mutate(Number = as.integer(Number))
head(genre)
head(studio)
# This code does the above listed transformations
data <- data %>%
mutate(name = as.character(name)) %>%
mutate(episodes = as.integer(episodes))
# Calculating the number of rows
nrow(data)
nrow(genre)
nrow(studio)
# sorting studios in descending order
top_five_studios <- studio %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_studios
top_five_studios %>%
# plotting x as studio and y as number
ggplot(mapping = aes(x = Studio, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Studio (top 5)", x = "Names of Studios",
y = "Number of anime released")
# sorting genres in descending order
top_five_genres <- genre %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_genres
top_five_genres %>%
# plotting x as genres and y as number
ggplot(mapping = aes(x = Genre, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Genre (top 5)", x = "Genre",
y = "Number of anime")
# plotting x axis episode and y axis rating
data %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# splitting it into 5 episode range
data$episodeRange <- data$episodes %>%
cut(breaks = 5)
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodeRange, y = rating)) +
geom_boxplot() + # boxplot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis members.
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = members)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Number of Members", title = "Plot of Episodes vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_point() + # scatter plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_smooth() + # fitting a smooth line plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# let us fit a linear model. members as a function of rating.
fittedLine <- lm(members ~ rating + I(rating^2) + I(rating^3), data)
tidy(fittedLine)
data <- augment(fittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
knitr::opts_chunk$set(echo = TRUE)
# inlcuding dependancies
library(tidyverse)
library(rvest)
library(stringr)
library(broom)
data <- read.csv("anime.csv") # reads the data from anime.csv file
head(data) # shows basic info about the data.
url <- "https://myanimelist.net/anime.php"
# Let us first get the data from the wesite using rvest functions.
info <- url %>%
read_html() %>%
html_nodes(".genre-list.al") %>%
html_text() %>%
as_data_frame()
head(info) # lets look at the data we collected.
# splitting the data into two columns for the second data set
genre <- info %>%
slice(1:43) %>%
separate(value, c("Genre", "Number"), sep = " \\(")
# splitting the data into two columns for the third data set
studio <- info %>%
slice(44:92) %>%
separate(value, c("Studio", "Number"), sep = " \\(")
# function to remove , and ) characters and return the modified string
remove_junk <- function(str) {
res <- "" # creating a new string
for (char in strsplit(str, "")[[1]]) { # iterating through the input string
if (char != "," && char != ")") {
res = paste(res, char, sep = "") # adding the char to res if it is not , and )
}
}
res
}
# calling the function remove junk to make the string look proper
genre$Number <- sapply(genre$Number, remove_junk)
studio$Number <- sapply(studio$Number, remove_junk)
# converting number to an integer.
genre <- genre %>%
mutate(Number = as.integer(Number))
studio <- studio %>%
mutate(Number = as.integer(Number))
head(genre)
head(studio)
# This code does the above listed transformations
data <- data %>%
mutate(name = as.character(name)) %>%
mutate(episodes = as.integer(episodes))
# Calculating the number of rows
nrow(data)
nrow(genre)
nrow(studio)
# sorting studios in descending order
top_five_studios <- studio %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_studios
top_five_studios %>%
# plotting x as studio and y as number
ggplot(mapping = aes(x = Studio, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Studio (top 5)", x = "Names of Studios",
y = "Number of anime released")
# sorting genres in descending order
top_five_genres <- genre %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_genres
top_five_genres %>%
# plotting x as genres and y as number
ggplot(mapping = aes(x = Genre, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Genre (top 5)", x = "Genre",
y = "Number of anime")
# plotting x axis episode and y axis rating
data %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# splitting it into 5 episode range
data$episodeRange <- data$episodes %>%
cut(breaks = 5)
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodeRange, y = rating)) +
geom_boxplot() + # boxplot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis members.
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = members)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Number of Members", title = "Plot of Episodes vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_point() + # scatter plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_smooth() + # fitting a smooth line plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# let us fit a linear model. members as a function of rating.
fittedLine <- lm(members ~ rating + I(rating^2) + I(rating^3), data)
tidy(fittedLine)
fitted_data <- augment(fittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
fitted_data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
fitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
# plotting x axis as episodes and y axis as .fitted values.
fitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
# let us fit a linear model. members as a function of rating.
fittedLine <- lm(members ~ rating, data)
knitr::opts_chunk$set(echo = TRUE)
# inlcuding dependancies
library(tidyverse)
library(rvest)
library(stringr)
library(broom)
data <- read.csv("anime.csv") # reads the data from anime.csv file
head(data) # shows basic info about the data.
url <- "https://myanimelist.net/anime.php"
# Let us first get the data from the wesite using rvest functions.
info <- url %>%
read_html() %>%
html_nodes(".genre-list.al") %>%
html_text() %>%
as_data_frame()
head(info) # lets look at the data we collected.
# splitting the data into two columns for the second data set
genre <- info %>%
slice(1:43) %>%
separate(value, c("Genre", "Number"), sep = " \\(")
# splitting the data into two columns for the third data set
studio <- info %>%
slice(44:92) %>%
separate(value, c("Studio", "Number"), sep = " \\(")
# function to remove , and ) characters and return the modified string
remove_junk <- function(str) {
res <- "" # creating a new string
for (char in strsplit(str, "")[[1]]) { # iterating through the input string
if (char != "," && char != ")") {
res = paste(res, char, sep = "") # adding the char to res if it is not , and )
}
}
res
}
# calling the function remove junk to make the string look proper
genre$Number <- sapply(genre$Number, remove_junk)
studio$Number <- sapply(studio$Number, remove_junk)
# converting number to an integer.
genre <- genre %>%
mutate(Number = as.integer(Number))
studio <- studio %>%
mutate(Number = as.integer(Number))
head(genre)
head(studio)
# This code does the above listed transformations
data <- data %>%
mutate(name = as.character(name)) %>%
mutate(episodes = as.integer(episodes))
# Calculating the number of rows
nrow(data)
nrow(genre)
nrow(studio)
# sorting studios in descending order
top_five_studios <- studio %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_studios
top_five_studios %>%
# plotting x as studio and y as number
ggplot(mapping = aes(x = Studio, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Studio (top 5)", x = "Names of Studios",
y = "Number of anime released")
# sorting genres in descending order
top_five_genres <- genre %>%
arrange(-Number) %>%
# lets get the top ten using slice
slice(1:5)
top_five_genres
top_five_genres %>%
# plotting x as genres and y as number
ggplot(mapping = aes(x = Genre, y = Number)) +
geom_bar(stat="identity") +
# giving better lables for x, y axis and the title.
labs(title = "Number of Anime for a given Genre (top 5)", x = "Genre",
y = "Number of anime")
# plotting x axis episode and y axis rating
data %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = rating)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# splitting it into 5 episode range
data$episodeRange <- data$episodes %>%
cut(breaks = 5)
# plotting x axis episode and y axis rating
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodeRange, y = rating)) +
geom_boxplot() + # boxplot
labs(x = "Number of Episodes", y = "Rating", title = "Plot of Ratings vs Episodes")
# plotting x axis episode and y axis members.
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = episodes, y = members)) +
geom_point() + # scatter plot
labs(x = "Number of Episodes", y = "Number of Members", title = "Plot of Episodes vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_point() + # scatter plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# plotting x axis ratings and y axis members
data %>%
filter(type == "TV") %>%
ggplot(mapping = aes(x = rating, y = members)) +
geom_smooth() + # fitting a smooth line plot
labs(x = "Ratings", y = "Number of Members", title = "Plot of Ratings vs Popularity")
# let us fit a linear model. members as a function of rating.
fittedLine <- lm(members ~ rating, data)
tidy(fittedLine)
fitted_data <- augment(fittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
fitted_data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
fitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
# let us fit a polynomial model. members as a function of rating.
polyFittedLine <- lm(members ~ rating + rating^2 + rating^3, data)
tidy(fittedLine)
fitted_data <- augment(polyFittedLine, data) # let us add it to the data
tidy(fittedLine)
fitted_data <- augment(polyFittedLine, data) # let us add it to the data
tidy(fittedLine)
newFitted_data <- augment(polyFittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
newFitted_data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
newFitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_line() +
labs(title="Linear Model visualized", x = "ratings",
y = "Fitted values for popularity")
# plotting x axis as episodes and y axis as .fitted values.
newFitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_smooth() +
labs(title="Polynomial Model visualized", x = "ratings",
y = "Fitted values for popularity")
# let us fit a polynomial model. members as a function of rating.
polyFittedLine <- lm(members ~ rating + rating^2 + rating^3, data)
tidy(fittedLine)
newFitted_data <- augment(polyFittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
newFitted_data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
newFitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_smooth() +
labs(title="Polynomial Model visualized", x = "ratings",
y = "Fitted values for popularity")
# let us fit a polynomial model. members as a function of rating.
polyFittedLine <- lm(members ~ rating + V(rating^2) + V(rating^3), data)
# let us fit a polynomial model. members as a function of rating.
polyFittedLine <- lm(members ~ rating + I(rating^2) + I(rating^3), data)
tidy(fittedLine)
newFitted_data <- augment(polyFittedLine, data) # let us add it to the data
# plotting x axis as episodes and y axis as .resedual values.
newFitted_data %>%
ggplot(mapping = aes(x = episodes, y = .resid)) + geom_violin() +
labs(title="Resedual of model", x = "episode",
y = "Reseduals for episodes")
# plotting x axis as episodes and y axis as .fitted values.
newFitted_data %>%
ggplot(mapping = aes(x = rating, y = .fitted)) + geom_smooth() +
labs(title="Polynomial Model visualized", x = "ratings",
y = "Fitted values for popularity")
anova(fittedLine, polyFittedLine, test="F")
anova(fittedLine, polyFittedLine, test="F")
